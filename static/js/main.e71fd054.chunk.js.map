{"version":3,"sources":["c/cell.jsx","c/column.jsx","c/table.jsx","c/tableClass.js","App.jsx","reportWebVitals.js","index.js"],"names":["Cell","props","d","data","options","disabled","CellOptions","className","type","defaultValue","part","col","ActionOption","icon","beforeOptions","children","useContext","AppContext","dispatch","state","onClick","payload","position","value","Col","undefined","company","table","rows","map","c","ind","p","x","y","insertFromCP","a","navigator","clipboard","readText","text","width","title","class","alert","Table","TableClass","n","this","colsCount","length","push","newRow","i","setCell","forEach","cell","r","newCell","reducer","action","split","setCol","toggleRowDisable","Error","createContext","App","useReducer","init","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e71fd054.chunk.js","sourcesContent":["import { useContext } from \"react\"\r\nimport App, { AppContext } from \"../App\"\r\n\r\nexport function Cell(props) {\r\n  const d = props.data.options.disabled;\r\n  return (\r\n    <CellOptions {...props} d={d}>\r\n      <label className=\"cell\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"cell-input\"\r\n          defaultValue={props.data.data}\r\n          disabled={d} />\r\n      </label>\r\n    </CellOptions>\r\n  )\r\n}\r\n\r\nfunction CellOptions(props) {\r\n\r\n  const beforeOptions = () => {\r\n    if (props.part === \"0\" && props.col === \"0\") {\r\n      return <ActionOption {...props} icon=\"bi bi-eye\" />\r\n    }\r\n  }\r\n\r\n  const afterOptions = () => {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"cell-wrapper\" disabled={props.d}>\r\n      <div className=\"before\">{beforeOptions()}</div>\r\n      {props.children}\r\n      <div className=\"after\">{afterOptions()}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ActionOption(props) {\r\n\r\n  const { state, dispatch } = useContext(AppContext);\r\n\r\n  const action = () => {\r\n    dispatch({\r\n      type: 'toggleRowDisable',\r\n      payload: { position: props.position, value: props.d }\r\n    })\r\n  }\r\n\r\n  return (<i onClick={action} className={props.icon}></i>)\r\n}","import { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\nimport { Cell } from \"./cell\";\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\n\r\nexport function Col(props) {\r\n  const { state, dispatch } = useContext(AppContext);\r\n  let col = 'нет данных';\r\n\r\n  if (state.company[props.part] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  if (state.company[+props.part].table !== undefined) {\r\n    col = state.company[+props.part].table.rows.map((c, ind) => {\r\n      return <Cell\r\n        key={ind}\r\n        {...props}\r\n        data={c[props.col]}\r\n        position={{ p: props.part, x: props.col, y: ind }} />\r\n    })\r\n  }\r\n\r\n  const insertFromCP = async () => {\r\n    let text = await navigator.clipboard.readText();\r\n    dispatch({\r\n      type: 'copyFromClipboard',\r\n      payload: {\r\n        part: props.part,\r\n        col: props.col,\r\n        data: text\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div width={props.width} className=\"col-wrapper\">\r\n      <div className=\"th\">\r\n        <span>{props.title}</span>\r\n        <div className=\"options\">\r\n          <i onClick={insertFromCP} class=\"bi-clipboard-plus\"></i>\r\n          <i onClick={() => alert('здесь будет сортировка')} className=\"bi-funnel\"></i>\r\n        </div>\r\n      </div>\r\n      {col}\r\n    </div>\r\n  )\r\n}","import { useContext } from \"react\";\r\nimport { AppContext } from \"../App\"\r\nimport { Col } from \"./column\";\r\n\r\nexport function Table(props) {\r\n  const { state, dispatch } = useContext(AppContext);\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      <Col width=\"100\" part=\"0\" col=\"0\" title=\"Ключевые фразы\" />\r\n      <Col width=\"100\" part=\"0\" col=\"1\" title=\"Группы ключевых слов\" />\r\n      <Col width=\"100\" part=\"0\" col=\"2\" title=\"Название компаний\" />\r\n      <Col width=\"50\" part=\"0\" col=\"3\" title=\"YW\" />\r\n      <Col width=\"50\" part=\"0\" col=\"4\" title='\"YW\"' />\r\n    </div>\r\n  )\r\n}","class TableClass {\r\n    constructor(n) {\r\n        this.colsCount = n;\r\n        this.rows = [];\r\n    }\r\n\r\n    setCell(x, y, data) {\r\n        while (this.rows.length <= y) {\r\n            this.rows.push(this.newRow());\r\n        }\r\n        if (this.rows[y] !== undefined && this.rows[y][x] !== undefined) {\r\n            this.rows[+y][+x].data = data;\r\n        }\r\n    }\r\n\r\n    setCol(x, data) {\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.setCell(x, i, data[i]);\r\n        };\r\n        return this.rows;\r\n    }\r\n\r\n    getRow(y) {\r\n        return this.rows[y];\r\n    }\r\n\r\n    toggleRowDisable(y, value) {\r\n        this.rows[y].forEach((cell) => {\r\n            cell.options.disabled = !value;\r\n        })\r\n        return this.rows;\r\n    }\r\n\r\n    newCell() {\r\n        return {\r\n            data: '',\r\n            options: {\r\n                disabled: false\r\n            }\r\n        }\r\n    }\r\n\r\n    newRow() {\r\n        let r = [];\r\n        for (let n = 0; n < this.colsCount; n++) {\r\n            r.push(this.newCell());\r\n        }\r\n        return r;\r\n    }\r\n\r\n    init() {\r\n        // add rows to table\r\n        for (let i = 0; i < 10; i++) {\r\n            this.rows.push(this.newRow());\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default TableClass;","import { useReducer } from 'react';\nimport { createContext } from 'react';\nimport './App.scss';\n// Components\nimport { Table } from './c/table';\nimport TableClass from './c/tableClass';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'copyFromClipboard':\n      const { part, col } = { ...action.payload };\n      let data = action.payload.data.split('\\r\\n');\n      for (let i = 0; i < data.length; i++) {\n        state.company[part].table.setCol(col, data)\n      }\n      return { ...state }\n\n    case 'toggleRowDisable':\n      const { p, x, y } = { ...action.payload.position }\n      if (state.company[p] !== undefined) {\n        state.company[p].table.toggleRowDisable(y, action.payload.value);\n      }\n      return { ...state }\n\n    default:\n      throw new Error();\n  }\n}\n\nexport let AppContext = createContext(null);\n\nfunction App() {\n\n  const [state, dispatch] = useReducer(reducer, {\n    company: [\n      // PARTs\n      {\n        table: new TableClass(5).init()\n      },\n      {\n        table: new TableClass(5).init()\n      }\n    ],\n  })\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      <Table />\n    </AppContext.Provider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}